#pragma kernel CSMain

#include "Assets/Lib/Shaders/NoiseLib.cginc"

int Size;
int Rep;
int Octaves;
float AmplitudeMul;

RWTexture3D<float4> Result;

float getWorley (float3 pos, int octaves, int rep)
{
    pos = float3(pos.x, pos.y, pos.z) / (float)Size;
    float amplitude = 0.5;
    float noise = 0;

    for (int i = 0; i < octaves; i++)
    {
        noise += amplitude * (1 - worley(pos, 1, false, rep).x);
        rep	*= 2;
        amplitude *= AmplitudeMul;
    }

    return noise;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float r = getWorley(id, Octaves, Rep);
    float g = getWorley(id, Octaves, Rep + 2);
    float b = getWorley(id, Octaves, Rep + 4);
    float a = getWorley(id, Octaves, Rep + 6);
    
    Result[id.xyz] = float4(r, g, b, a);
}
